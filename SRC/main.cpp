///////////////////////////////////////////////////////////////////////////////
//
// main.cpp
//
//
///////////////////////////////////////////////////////////////////////////////


#include "utils.h"


// main Sets up the router/realm and registers get() and set() proceedures.
//


int main(int argc, char** argv)
{
    std::cerr << "Boost: " << BOOST_VERSION << std::endl;
	std::cerr << "DEBUG: " << "In Main about to try" << std::endl;
	
    try {
        auto parameters = get_parameters(argc, argv);

        std::cerr << "Connecting to realm: " << parameters->realm() << std::endl;

        boost::asio::io_service io;
        bool debug = parameters->debug();
		std::cerr << "DEBUG: " << "created io boost object" << std::endl;
		std::cerr << "DEBUG:  creating transport with endpoint: " << parameters->rawsocket_endpoint() << std::endl;
		

        auto transport = std::make_shared<autobahn::wamp_tcp_transport>( io, parameters->rawsocket_endpoint(), debug);

        auto session = std::make_shared<autobahn::wamp_session>(io, debug);

        transport->attach(std::static_pointer_cast<autobahn::wamp_transport_handler>(session));

        // Make sure the continuation futures we use do not run out of scope prematurely.
        // Since we are only using one thread here this can cause the io service to block
        // as a future generated by a continuation will block waiting for its promise to be
        // fulfilled when it goes out of scope. This would prevent the session from receiving
        // responses from the router.
        boost::future<void> connect_future;
        boost::future<void> start_future;
        boost::future<void> join_future;
		boost::future<void> provide_future_get;
		boost::future<void> provide_future_set;
		

        connect_future = transport->connect().then([&](boost::future<void> connected) {
			std::cerr << "DEBUG: " << "transport connecting to the router?" << std::endl;
            try {
                connected.get();
            } catch (const std::exception& e) {
                std::cerr << e.what() << std::endl;
                io.stop();
                return;
            }

            std::cerr << "transport connected" << std::endl;

            start_future = session->start().then([&](boost::future<void> started) {
				std::cerr << "DEBUG: " << "starting the session" << std::endl;
                try {
                    started.get();
                } catch (const std::exception& e) {
                    std::cerr << e.what() << std::endl;
                    io.stop();
                    return;
                }

                std::cerr << "session started" << std::endl;

                join_future = session->join(parameters->realm()).then([&](boost::future<uint64_t> joined) {
                    try {
                        std::cerr << "joined realm: " << joined.get() << std::endl;
                    } catch (const std::exception& e) {
                        std::cerr << e.what() << std::endl;
                        io.stop();
                        return;
                    }
#if 1
                    provide_future_get = session->provide("com.kikis.get", &get).then(					
                        [&](boost::future<autobahn::wamp_registration> registration) {
						std::cerr << "DEBUG: registering the get  procedure" << std::endl;
                        try {
                            std::cerr << "registered get procedure:" << registration.get().id() << std::endl;
                        } catch (const std::exception& e) {
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
#endif
#if 1
                    provide_future_set = session->provide("com.kikis.set", &set).then(					
                        [&](boost::future<autobahn::wamp_registration> registration) {
						std::cerr << "DEBUG: registering the set  procedure" << std::endl;
                        try {
                            std::cerr << "registered set procedure:" << registration.get().id() << std::endl;
                        } catch (const std::exception& e) {
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
#endif
                });
            });
        });

		std::cerr << "DEBUG: " << "out of the try block..." << std::endl;
        std::cerr << "starting io service" << std::endl;
		std::cerr << "calling io.run()" << std::endl;
        io.run();
		std::cerr << "back from io.run()" << std::endl;
        std::cerr << "stopped io service" << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "exception: " << e.what() << std::endl;
        return -1;
    }

    return 0;
}
