///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Crossbar.io Technologies GmbH and contributors
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

#include "parameters.hpp"

#include <autobahn.hpp>
#include <boost/asio.hpp>
#include <boost/version.hpp>
#include <boost/date_time/posix_time/posix_time.hpp>
#include <iostream>
#include <memory>
#include <string>
#include <thread>
#include <tuple>


#include <windows.h>
#include <comutil.h>  
#include <comdef.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include <ole2.h>
#include <UIAutomation.h>
#include <uiautomation.h>

#pragma comment(lib, "comsuppw.lib")


extern void add (autobahn::wamp_invocation invocation);
extern void walk_tree_from_root (IUIAutomationElement* pParent, int indent, autobahn::wamp_invocation invocation);
extern void long_op (autobahn::wamp_invocation invocation);


int main(int argc, char** argv)
{
    std::cerr << "Boost: " << BOOST_VERSION << std::endl;
	std::cerr << "DEBUG: " << "In Main about to try" << std::endl;

	
    try {
        auto parameters = get_parameters(argc, argv);

        std::cerr << "Connecting to realm: " << parameters->realm() << std::endl;

        boost::asio::io_service io;
        bool debug = parameters->debug();
		std::cerr << "DEBUG: " << "created io boost object" << std::endl;
		std::cerr << "DEBUG:  creating transport with endpoint: " << parameters->rawsocket_endpoint() << std::endl;
		

        auto transport = std::make_shared<autobahn::wamp_tcp_transport>(
                io, parameters->rawsocket_endpoint(), debug);

        auto session = std::make_shared<autobahn::wamp_session>(io, debug);

        transport->attach(std::static_pointer_cast<autobahn::wamp_transport_handler>(session));

        // Make sure the continuation futures we use do not run out of scope prematurely.
        // Since we are only using one thread here this can cause the io service to block
        // as a future generated by a continuation will block waiting for its promise to be
        // fulfilled when it goes out of scope. This would prevent the session from receiving
        // responses from the router.
        boost::future<void> connect_future;
        boost::future<void> start_future;
        boost::future<void> join_future;
        boost::future<void> provide_future_add;
		//boost::future<void> provide_future_walk_tree_from_root;
		boost::future<void> provide_future_long_op;

        connect_future = transport->connect().then([&](boost::future<void> connected) {
			std::cerr << "DEBUG: " << "transport connecting to the router?" << std::endl;
            try {
                connected.get();
            } catch (const std::exception& e) {
                std::cerr << e.what() << std::endl;
                io.stop();
                return;
            }

            std::cerr << "transport connected" << std::endl;

            start_future = session->start().then([&](boost::future<void> started) {
				std::cerr << "DEBUG: " << "starting the session" << std::endl;
                try {
                    started.get();
                } catch (const std::exception& e) {
                    std::cerr << e.what() << std::endl;
                    io.stop();
                    return;
                }

                std::cerr << "session started" << std::endl;

                join_future = session->join(parameters->realm()).then([&](boost::future<uint64_t> joined) {
                    try {
                        std::cerr << "joined realm: " << joined.get() << std::endl;
                    } catch (const std::exception& e) {
                        std::cerr << e.what() << std::endl;
                        io.stop();
                        return;
                    }
#if 1
                    provide_future_add = session->provide("com.example.add", &add).then(
						
                        [&](boost::future<autobahn::wamp_registration> registration) {
						std::cerr << "DEBUG: registering the add procedure" << std::endl;
                        try {
                            std::cerr << "registered add procedure:" << registration.get().id() << std::endl;
                        } catch (const std::exception& e) {
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
#endif	
#if 0
					provide_future_walk_tree_from_root = session->provide("com.example.walk_tree_from_root", &walk_tree_from_root).then(
						
                        [&](boost::future<autobahn::wamp_registration> registration) {
						std::cerr << "DEBUG: registering the walk_tree_from_root procedure" << std::endl;
                        try {
                            std::cerr << "registered walk_tree_from_root procedure:" << registration.get().id() << std::endl;
                        } catch (const std::exception& e) {
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
#endif					
#if 1
                    provide_future_long_op = session->provide("com.example.long_op", &long_op).then(
                        [&](boost::future<autobahn::wamp_registration> registration) {
						std::cerr << "DEBUG: " << "registering the long_op procedure" << std::endl;
                        try {
                            std::cerr << "registered long_op procedure:" << registration.get().id() << std::endl;
                        }
                        catch (const std::exception& e) {
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
#endif						
                });
            });
        });

		std::cerr << "DEBUG: " << "out of the try block..." << std::endl;
        std::cerr << "starting io service" << std::endl;
		std::cerr << "calling io.run()" << std::endl;
        io.run();
		std::cerr << "back from io.run()" << std::endl;
        std::cerr << "stopped io service" << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "exception: " << e.what() << std::endl;
        return -1;
    }

    return 0;
}
